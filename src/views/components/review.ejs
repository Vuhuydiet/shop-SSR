<div class="max-w-3xl mx-auto p-6 bg-white shadow rounded">
  <div id="reviews-container" class="space-y-4">
    <!-- Reviews will be loaded here dynamically -->
  </div>
  
  <!-- Pagination -->
  <div id="pagination-container" class="flex justify-center items-center mt-4 space-x-2">
    <!-- Pagination buttons will be dynamically added here -->
  </div>

  <!-- Post Review Section -->

  <div class="mt-6">
    <h3 class="text-lg font-bold">Leave a Review</h3>
    <form id="review-form" class="mt-4 space-y-4">
      <div class="flex items-center space-x-2">
        <label class="font-semibold">Rating:</label>
        <div class="flex space-x-1">
          <!-- Rating Stars -->
          <span data-rating="1" class="star text-gray-400 cursor-pointer text-2xl"
            >&#9733;</span
          >
          <span data-rating="2" class="star text-gray-400 cursor-pointer text-2xl"
            >&#9733;</span
          >
          <span data-rating="3" class="star text-gray-400 cursor-pointer text-2xl"
            >&#9733;</span
          >
          <span data-rating="4" class="star text-gray-400 cursor-pointer text-2xl"
            >&#9733;</span
          >
          <span data-rating="5" class="star text-gray-400 cursor-pointer text-2xl"
            >&#9733;</span
          >
        </div>
      </div>
      <input type="hidden" name="rating" id="rating-value" value="0" required />
      <textarea
        class="w-full border rounded p-2"
        rows="4"
        placeholder="Write your review here..."
        name="review"
        required
      ></textarea>
      <div class="flex justify-end">
        <button
          type="submit"
          class="bg-primary border border-primary text-white px-8 py-2 font-medium rounded uppercase flex items-center gap-2 hover:bg-transparent hover:text-primary transition"
        >
          Submit Review
        </button>
      </div>
    </form>
  </div>
</div>

<script>
  const PAGE_SIZE = 5;

  document.addEventListener('DOMContentLoaded', async () => {
    await fetchReviews();
  });

  const reviewForm = document.getElementById("review-form");
  reviewForm.addEventListener("submit", async (event) => {
    event.preventDefault();

    const formData = new FormData(reviewForm);
    const reviewData = Object.fromEntries(formData.entries());

    try {
      const response = await fetch("/reviews", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          productId: +'<%= product.productId %>',
          rating: reviewData.rating,
          reviewContent: reviewData.review,
        }),
      });

      const data = await response.json(); 
      
      if (response.ok) {
        resetStars();
        reviewForm.reset();
        await fetchReviews();
      } else {
        if (response.status === 401) {
          window.location.href = "/users/login";
        } else {
          console.error("Failed to submit review:", data.message);
        }
      }
    } catch (error) {
      console.error("Error submitting review:", error);
    }
  });


  // Star rating selection
  const stars = document.querySelectorAll(".star");
  const ratingInput = document.getElementById("rating-value");

  function resetStars() {
    stars.forEach((star) => {
      star.classList.remove("text-yellow-400");
      star.classList.add("text-gray-400");
    });
  }

  stars.forEach((star) => {
    star.addEventListener("click", () => {
      const rating = star.getAttribute("data-rating");
      ratingInput.value = rating;

      // Highlight selected stars
      stars.forEach((s) => {
        if (s.getAttribute("data-rating") <= rating) {
          s.classList.add("text-yellow-400");
          s.classList.remove("text-gray-400");
        } else {
          s.classList.add("text-gray-400");
          s.classList.remove("text-yellow-400");
        }
      });
    });
  });

  async function fetchReviews(page = 1) {
    try {
      const response = await fetch(`/products/${productId}/reviews?page=${page}&limit=${PAGE_SIZE}&sortBy=createdAt&order=desc`);
      const data = await response.json();

      const reviewsContainer = document.getElementById("reviews-container");
      const paginationContainer = document.getElementById("pagination-container");
      reviewsContainer.innerHTML = "";
      paginationContainer.innerHTML = "";

      data.metadata.reviews.forEach((review) => {
        const reviewElement = document.createElement("div");
        reviewElement.classList.add("p-4", "border", "rounded");
        // Render stars based on the review rating
        const starsHTML = [...Array(5)].map((_, i) => {
          return `<span class="${
            i < review.rating ? 'text-yellow-400' : 'text-gray-400'
          }">&#9733;</span>`;
        }).join('');

        const createdAt = new Date(review.createdAt).toLocaleDateString();
        reviewElement.innerHTML = `
        <div class="flex justify-between items-center">
          <div>
            <img style="display: inline" src="${review.user.avatarUrl || '/assets/images/default-avatar.png'}" alt="Avatar" class="w-10 h-10 rounded-full mr-4">
            <h3 class="font-semibold" style="display: inline">${review.user.fullname || review.user.email}</h3>
          </div>
            <span class="text-sm text-gray-500">${createdAt}</span>
          </div>
          <div class="flex items-center space-x-1 mt-1">
            ${starsHTML}
          </div>
          <p class="mt-2 text-gray-700">${review.reviewContent}</p>
        `;

        reviewsContainer.appendChild(reviewElement);
      });

      for (let i = 1; i <= Math.ceil(data.metadata.count / PAGE_SIZE); i++) {
        const button = document.createElement("button");
        const  style = [
          "px-3", "py-1", 
          i === page ? "bg-blue-600" : "bg-gray-200", 
          i === page ? "text-red-600" : "text-black", 
          "rounded", "hover:bg-gray-300"
        ];
        button.classList.add(...style);
        button.textContent = i;
        button.disabled = i === page;
        button.addEventListener("click", () => fetchReviews(i));
        paginationContainer.appendChild(button);
      }
    } catch (error) {
      console.error("Error fetching reviews:", error);
    }
  }
</script>
