<div class="container py-4 flex items-center gap-3">
    <a href="/" class="text-primary text-base">
        <i class="fa-solid fa-house"></i>
    </a>
    <span class="text-sm text-gray-400">
    <i class="fa-solid fa-chevron-right"></i>
  </span>
    <p class="text-gray-600 font-medium">Account</p>
</div>

<!-- account wrapper -->
<div class="container grid grid-cols-12 items-start gap-6 pt-4 pb-16">
    <!-- sidebar -->
    <div class="col-span-3">
        <div class="px-4 py-3 shadow flex items-center gap-4">
            <div class="flex-shrink-0">
                <img src="<%= user.avatarUrl || '/assets/images/avatar.png' %>"
                     alt="profile"
                     class="rounded-full w-14 h-14 border border-gray-200 p-1 object-cover"
                />
            </div>
            <div class="flex-grow">
                <p class="text-gray-600">Hello,</p>
                <h4 class="text-gray-800 font-medium"><%= user.fullname || user.email %></h4>
            </div>
        </div>

        <div
                class="mt-6 bg-white shadow rounded p-4 divide-y divide-gray-200 space-y-4 text-gray-600"
        >
            <div class="space-y-1 pl-8">
                <a
                        href="/profile"
                        class="relative hover:text-primary block capitalize transition"
                >
              <span class="absolute -left-8 top-0 text-base">
                <i class="fa-regular fa-address-card"></i>
              </span>
                    Manage account
                </a>
                <a
                        href="/profile/information"
                        class="relative hover:text-primary block capitalize transition"
                >
                    Profile information
                </a>
                <a
                        href="/profile/address"
                        class="relative hover:text-primary block capitalize transition"
                >
                    Manage addresses
                </a>
                <a
                        href="/profile/changepassword"
                        class="relative hover:text-primary block capitalize transition"
                >
                    Change password
                </a>
            </div>

            <div class="space-y-1 pl-8 pt-4">
                <a
                        href="/profile/reviews"
                        class="relative hover:text-primary block font-medium capitalize transition"
                >
                    My reviews
                </a>
            </div>

            <div class="space-y-1 pl-8 pt-4">
                <a
                        href="/profile/reports"
                        class="relative text-primary block font-medium capitalize transition"
                >
                    My reports
                </a>
            </div>

            <div class="space-y-1 pl-8 pt-4">
                <a
                        href="/users/logout"
                        class="relative hover:text-primary block font-medium capitalize transition"
                >
              <span class="absolute -left-8 top-0 text-base">
                <i class="fa-solid fa-right-from-bracket"></i>
              </span>
                    Logout
                </a>
            </div>
        </div>
    </div>

    <!-- info -->
    <div class="col-span-9 shadow rounded px-6 pt-5 pb-7">
        <h1 class="text-2xl uppercase font-medium mb-1">Revenue Report</h1>
        <div>
            <form id="filter-form">
                <label for="time-range">Time Range:</label>
                <select
                        name="sortBy"
                        id="time-range"
                        form="searchForm"
                        class="w-44 text-sm text-gray-600 py-3 px-4 border-gray-300 shadow-sm rounded focus:ring-primary focus:border-primary"
                >
                    <option value="day">Day</option>
                    <option value="week">Week</option>
                    <option value="month">Month</option>
                </select>
                <br>
                <label for="start-date">Start Date:</label>
                <input type="date" id="start-date" class="mt-2 w-44 text-sm text-gray-600 py-3 px-4 border-gray-300 shadow-sm rounded focus:ring-primary focus:border-primary">

                <label for="end-date" class="ml-6">End Date:</label>
                <input type="date" id="end-date" class="w-44 text-sm text-gray-600 py-3 px-4 border-gray-300 shadow-sm rounded focus:ring-primary focus:border-primary">
                <br>
                <label for="sort-by">Sort By:</label>
                <select id="sort-by" class="mt-2 w-44 text-sm text-gray-600 py-3 px-4 border-gray-300 shadow-sm rounded focus:ring-primary focus:border-primary">
                    <option value="createdAt">Date</option>
                    <option value="totalAmount">Revenue</option>
                </select>

                <label for="order" class="ml-6">Order:</label>
                <select id="order" class="w-44 text-sm text-gray-600 py-3 px-4 border-gray-300 shadow-sm rounded focus:ring-primary focus:border-primary">
                    <option value="asc">Ascending</option>
                    <option value="desc">Descending</option>
                </select>

                <button type="submit" class="mt-4 block w-full py-2 text-center text-white bg-primary border border-primary rounded hover:bg-transparent hover:text-primary transition uppercase font-roboto font-medium">Filter</button>
            </form>
            <div id="table-chart-dev">
            <table id="revenue-table">
                <thead>
                <tr>
                    <th>Date</th>
                    <th>Revenue</th>
                </tr>
                </thead>
                <tbody>
                <!-- Data will be inserted here -->
                </tbody>
            </table>
            <div id="pagination"></div>
            <canvas id="revenue-chart" width="400" height="200"></canvas>
            </div>
        </div>
        <!-- ./info -->
    </div>
</div>
<!-- ./account wrapper -->
<script>
    // hidden table and chart when load
    const dataPresentation= document.getElementById("table-chart-dev");

    dataPresentation.classList.add("hidden");
    dataPresentation.classList.add("hidden");

    const fetchRevenueReport = async (startDate, endDate, page = 1, pageSize = 10, sortBy = 'createdAt', order = 'desc', timeRange='day') => {
        try {
            const response = await fetch(`/profile/revenue-report?startDate=${startDate}&endDate=${endDate}&page=${page}&pageSize=${pageSize}&sortBy=${sortBy}&order=${order}&timeRange=${timeRange}`);
            const result = await response.json();

            if (response.ok) {
                const data = result.metadata;
                if (data.revenue.length === 0) {
                    alert("No revenue data found for the selected date range.");
                    return;
                }

                dataPresentation.classList.remove("hidden");
                // Populate the table
                const tableBody = document.getElementById("revenue-table").querySelector("tbody");
                tableBody.innerHTML = ""; // Clear previous data
                data.revenue.forEach(order => {
                    const newRow = tableBody.insertRow();
                    const dateCell = newRow.insertCell(0);
                    const amountCell = newRow.insertCell(1);
                    dateCell.textContent = new Date(order.timeGroup).toLocaleDateString();
                    amountCell.textContent = `$${order.totalAmount}`;
                    dateCell.textContent = order.timeGroup;
                    amountCell.textContent = `$${order.totalAmount}`;
                });

                const labels = data.revenue.map(order => {
                        if (order.timeGroup.split(" to ")[0] === order.timeGroup.split(" to ")[1]) {
                            return order.timeGroup.split(" to ")[0]
                        } else {
                            return order.timeGroup
                        }
                    }
                )
                const revenues = data.revenue.map(order => order.totalAmount);
                updateChart(labels, revenues); // Update the chart with the new labels and data


                // Update pagination
                updatePagination(data.totalCount, page, pageSize);
            }
        } catch (error) {
            console.error("Error fetching revenue report:", error);
        }
    };


    const updatePagination = (totalCount, currentPage, pageSize) => {
        const totalPages = Math.ceil(totalCount / pageSize);
        const paginationContainer = document.getElementById("pagination");
        paginationContainer.innerHTML = ""; // Clear previous pagination

        for (let i = 1; i <= totalPages; i++) {
            const pageButton = document.createElement("button");
            pageButton.textContent = i;
            pageButton.disabled = i === currentPage;
            pageButton.addEventListener("click", () => {
                const startDate = document.getElementById("start-date").value;
                const endDate = document.getElementById("end-date").value;
                const sortBy = document.getElementById("sort-by").value;
                const order = document.getElementById("order").value;
                fetchRevenueReport(startDate, endDate, i, pageSize, sortBy, order);
            });
            paginationContainer.appendChild(pageButton);
        }
    };

    document.getElementById("filter-form").addEventListener("submit", (event) => {
        event.preventDefault();
        const startDate = document.getElementById("start-date").value;
        const endDate = document.getElementById("end-date").value;
        const sortBy = document.getElementById("sort-by").value;
        const order = document.getElementById("order").value;
        const timeRange = document.getElementById("time-range").value;
        fetchRevenueReport(startDate, endDate, 1, 10, sortBy, order, timeRange);
    });

    const ctx = document.getElementById('revenue-chart').getContext('2d');
    const revenueChart = new Chart(ctx, {
        type: 'bar', // Type of chart (bar chart)
        data: {
            labels: [], // Time periods (e.g., days, weeks, months)
            datasets: [{
                label: 'Revenue', // Label for the bar chart
                data: [], // Revenue data
                backgroundColor: 'rgba(75, 192, 192, 0.2)', // Bar color
                borderColor: 'rgba(75, 192, 192, 1)', // Border color
                borderWidth: 1, // Border width
            }]
        },
        options: {
            responsive: true, // Make the chart responsive
            scales: {
                x: {
                    grid: {
                        display: false, // Hide grid lines for x-axis
                    }
                },
                y: {
                    beginAtZero: true, // Start the y-axis at 0
                    grid: {
                        color: 'rgba(200, 200, 200, 0.2)', // Grid line color
                    }
                }
            }
        }
    });

    // Update the chart with new data
    const updateChart = (labels, revenues) => {
        revenueChart.data.labels = labels; // Set the new labels
        revenueChart.data.datasets[0].data = revenues; // Set the new revenue data
        revenueChart.update(); // Update the chart
    };

</script>

