<!-- breadcrumb -->
<div class="container py-4 flex items-center gap-3">
  <a href="/" class="text-primary text-base">
    <i class="fa-solid fa-house"></i>
  </a>
  <span class="text-sm text-gray-400">
    <i class="fa-solid fa-chevron-right"></i>
  </span>
  <p class="text-gray-600 font-medium">Shop</p>
</div>
<!-- ./breadcrumb -->

<!-- shop wrapper -->
<form id="searchForm" action="/products" method="GET"
  class="container grid md:grid-cols-4 grid-cols-2 gap-6 pt-4 pb-16 items-start">
  <!-- sidebar -->
  <!-- drawer init and toggle -->
  <div class="text-center md:hidden">
    <button
      class="text-white hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 mr-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800 block md:hidden"
      type="button" data-drawer-target="drawer-example" data-drawer-show="drawer-example"
      aria-controls="drawer-example">
      <ion-icon name="grid-outline"></ion-icon>
    </button>
  </div>
  <!-- ./sidebar -->
  <div class="col-span-1 bg-white px-4 pb-6 shadow rounded overflow-hidden hidden md:block">
    <div class="divide-y divide-gray-200 space-y-5">
      <div>
        <h3 class="text-xl text-gray-800 mb-3 uppercase font-medium">
          Categories
        </h3>

        <div class="space-y-2">
          <% locals.categories.forEach((category, idx)=> { %>
            <div class="flex items-center">
              <input type="checkbox" name="categories" value="<%= category.categoryId %>" id="<%= `cat-${idx}` %>"
                <%=locals.query && locals.query.categories?.includes(category.categoryId) ? 'checked' : '' %>
              class="text-primary focus:ring-0 rounded-sm cursor-pointer"
              />
              <label for="<%= `cat-${idx}` %>" class="text-gray-600 ml-3 cursor-pointer">
                <%= category.categoryName %>
              </label>
            </div>
            <% }) %>
        </div>
      </div>

      <div class="pt-4">
        <h3 class="text-xl text-gray-800 mb-3 uppercase font-medium">Brands</h3>
        <div class="space-y-2">
          <% locals.brands.forEach((brand, idx)=> { %>
            <div class="flex items-center">
              <input type="checkbox" name="brands" value="<%= brand %>" id="<%= `brand-${idx}` %>" <%=locals.query &&
                locals.query.brands?.includes(brand) ? 'checked' : '' %>
              class="text-primary focus:ring-0 rounded-sm cursor-pointer" />
              <label for="<%= `brand-${idx}` %>" class="text-gray-600 ml-3 cursor-pointer">
                <%= brand %>
              </label>
            </div>
            <% }) %>
        </div>
      </div>

      <div class="pt-4">
        <h3 class="text-xl text-gray-800 mb-3 uppercase font-medium">Price</h3>
        <div class="mt-4 flex items-center">
          <input type="text" name="minPrice" id="min" value="<%= locals.query && locals.query.minPrice || undefined %>"
            class="w-full border-gray-300 focus:border-primary rounded focus:ring-0 px-3 py-1 text-gray-600 shadow-sm"
            placeholder="min" />
          <span class="mx-3 text-gray-500">-</span>
          <input type="text" name="maxPrice" id="max" value="<%= locals.query && locals.query.maxPrice || undefined %>"
            class="w-full border-gray-300 focus:border-primary rounded focus:ring-0 px-3 py-1 text-gray-600 shadow-sm"
            placeholder="max" />
        </div>
      </div>

      <div class="pt-4">
        <h3 class="text-xl text-gray-800 mb-3 uppercase font-medium">Star</h3>
        <div class="mt-4 flex items-center">
          <!--
          <label for="minRating">Min rating:</label>
          <input type="number" name="minRating" min="0" max="5" step="0.1" />

          <label for="maxRating">Max Rating:</label>
          <input type="number" name="maxRating" min="0" max="5" step="0.1" />
        -->
          <input type="number" name="minRating" id="minRating" min="1" max="5" step="0.1"
            value="<%= locals.query && locals.query.minRating || undefined %>"
            class="w-full border-gray-300 focus:border-primary rounded focus:ring-0 px-3 py-1 text-gray-600 shadow-sm"
            placeholder="min" />
          <span class="mx-3 text-gray-500">-</span>
          <input type="number" name="maxRating" id="maxRating" min="1" max="5" step="0.1"
            value="<%= locals.query && locals.query.maxRating || undefined %>"
            class="w-full border-gray-300 focus:border-primary rounded focus:ring-0 px-3 py-1 text-gray-600 shadow-sm"
            placeholder="max" />
        </div>
      </div>

      <div class="mt-6 flex gap-3 border-b justify-items-end border-gray-200 pb-5 pt-5">
        <button type="submit"
          class="bg-primary border border-primary text-white px-8 py-2 font-medium rounded uppercase flex items-center gap-2 hover:bg-transparent hover:text-primary transition">
          <i class="fa-solid fa-magnifying-glass"></i> Search
        </button>

      </div>
    </div>

  </div>


  <!-- products -->
  <div class="col-span-3">
    <div class="flex items-center mb-4">
      <select name="sortBy" id="sort" form="searchForm"
        class="w-44 text-sm text-gray-600 py-3 px-4 border-gray-300 shadow-sm rounded focus:ring-primary focus:border-primary">
        <option value="" <%=locals.query && locals.query.sortBy==='' ? 'selected' : '' %>>Default sorting</option>
        <option value="currentPrice-asc" <%=locals.query && locals.query.sortBy==='currentPrice' &&
          locals.query.order==='asc' ? 'selected' : '' %>>Price low to high</option>
        <option value="currentPrice-desc" <%=locals.query && locals.query.sortBy==='currentPrice' &&
          locals.query.order==='desc' ? 'selected' : '' %>>Price high to low</option>
        <option value="publishedAt-desc" <%=locals.query && locals.query.sortBy==='publishedAt' &&
          locals.query.order==='desc' ? 'selected' : '' %>>Latest product</option>
      </select>
    </div>

    <div class="grid md:grid-cols-3 grid-cols-2 gap-6">
      <% locals.products.forEach(product=> { %>
        <div class="bg-white shadow rounded overflow-hidden group">
          <div class="relative">
            <a href="/products/<%= product.productId %>">
              <img src="<%= product.productImageUrl %>" alt="<%= product.productName %>" class="w-full" />
              <div
                class="absolute inset-0 bg-black bg-opacity-40 flex items-center justify-center gap-2 opacity-0 group-hover:opacity-100 transition">
              </div>
            </a>
          </div>
          <div class="pt-4 pb-3 px-4 w-full">
            <a href="/products/<%= product.productId %>">
              <h4
                class="uppercase font-medium text-xl mb-2 text-gray-800 hover:text-primary transition truncate whitespace-nowrap overflow-hidden text-ellipsis max-w-[200px]">
                <%= product.productName %>
              </h4>
            </a>
            <div class="flex items-baseline mb-1 space-x-2">
              <p class="text-xl text-primary font-semibold">
                $<%= product.currentPrice %>
              </p>
              <p class="text-sm text-gray-400 line-through">
                $<%= product.originalPrice %>
              </p>
            </div>
            <div class="flex items-center">
              <div class="flex gap-1 text-sm text-yellow-400">
                <span><i class="fa-solid fa-star"></i></span>
                <span>
                  <%= product.rating %>
                </span>
              </div>
            </div>
          </div>
        </div>
        <% }) %>
    </div>
  </div>


</form>
<!-- Pagination Controls -->
<div class="pagination-container flex justify-center items-center space-x-2 mt-6">
  <% if (currentPage> 1) { %>
    <a href="?<%= `page=${currentPage - 1}&limit=${query.limit || 9}` %>"
      class="px-4 py-2 bg-gray-300 text-gray-800 rounded">
      Previous
    </a>
    <% } %>

      <% for (let i=1; i <=totalPages; i++) { %>
        <a href="?<%= `page=${i}&limit=${query.limit || 9}` %>"
          class="px-4 py-2 rounded <%= currentPage === i ? 'bg-primary text-white' : 'bg-gray-300 text-gray-800' %>">
          <%= i %>
        </a>
        <% } %>

          <% if (currentPage < totalPages) { %>
            <a href="?<%= `page=${currentPage + 1}&limit=${query.limit || 9}` %>"
              class="px-4 py-2 bg-gray-300 text-gray-800 rounded">
              Next
            </a>
            <% } %>
</div>

<!-- ./products -->


<!-- ./shop wrapper -->

<script>
  const form = document.getElementById('searchForm');
  console.log("OK!1234");
  form.addEventListener('submit', async (e) => {
    e.preventDefault(); // Prevent the default form submission behavior

    const minRating = parseFloat(document.getElementById('minRating').value);
    const maxRating = parseFloat(document.getElementById('maxRating').value);

    if (minRating > maxRating) {
      alert('Min rating must be less than or equal to Max rating.');
      return;
    }

    // Collect form data
    const formData = new FormData(form);
    const searchParams = new URLSearchParams();

    if (formData.get('categories')) {
      formData.getAll('categories').forEach((category) => {
        searchParams.append('categories', category);
      });
    }

    if (formData.get('brands')) {
      formData.getAll('brands').forEach((brand) => {
        searchParams.append('brands', brand);
      });
    }

    if (formData.get('minPrice')) {
      searchParams.append('minPrice', formData.get('minPrice'));
    }

    if (formData.get('maxPrice')) {
      searchParams.append('maxPrice', formData.get('maxPrice'));
    }

    if (formData.get('minRating')) {
      searchParams.append('minRating', formData.get('minRating'));
    }

    if (formData.get('maxRating')) {
      searchParams.append('maxRating', formData.get('maxRating'));
    }

    if (formData.get('sortBy')) {
      const [sortBy, order] = formData.get('sortBy').split('-');
      searchParams.append('sortBy', sortBy);
      searchParams.append('order', order);
    }

    const queryString = searchParams.toString();
    console.log('Query Params:', queryString);

    try {

      const response = await fetch(`/api/products?${queryString}`);
      const data = await response.json();
      console.log(data);

      renderProducts(data.products);
      renderPagination(data.currentPage, data.totalPages);
    } catch (error) {
      console.error('Error fetching products:', error);
      alert('Failed to fetch products. Please try again.');
    }
  });

  // Function to render products dynamically
  function renderProducts(products) {
    const productGrid = document.querySelector('.grid');
    productGrid.innerHTML = ''; // Clear existing products

    products.forEach((product) => {
      const productHTML = `
            <div class="bg-white shadow rounded overflow-hidden group">
                <div class="relative">
                    <a href="/products/${product.productId}">
                        <img src="${product.productImageUrl}" alt="${product.productName}" class="w-full" />
                    </a>
                </div>
                <div class="pt-4 pb-3 px-4 w-full">
                    <a href="/products/${product.productId}">
                        <h4 class="uppercase font-medium text-xl mb-2 text-gray-800 hover:text-primary transition truncate whitespace-nowrap overflow-hidden text-ellipsis max-w-[200px]">
                            ${product.productName}
                        </h4>
                    </a>
                    <div class="flex items-baseline mb-1 space-x-2">
                        <p class="text-xl text-primary font-semibold">$${product.currentPrice}</p>
                        <p class="text-sm text-gray-400 line-through">$${product.originalPrice}</p>
                    </div>
                    <div class="flex items-center">
                        <div class="flex gap-1 text-sm text-yellow-400">
                            <span><i class="fa-solid fa-star"></i></span>
                            <span>${product.rating}</span>
                        </div>
                    </div>
                </div>
            </div>`;
      productGrid.innerHTML += productHTML;
    });
  }

  // Function to render pagination dynamically
  function renderPagination(currentPage, totalPages) {
    const paginationContainer = document.querySelector('.pagination-container');
    paginationContainer.innerHTML = ''; // Clear existing pagination

    if (currentPage > 1) {
      paginationContainer.innerHTML += `
            <a href="#" class="pagination-link px-4 py-2 bg-gray-300 text-gray-800 rounded" data-page="${currentPage - 1}">
                Previous
            </a>`;
    }

    for (let i = 1; i <= totalPages; i++) {
      paginationContainer.innerHTML += `
            <a href="#" class="pagination-link px-4 py-2 rounded ${i === currentPage ? "bg-primary text-white" : "bg-gray-300 text-gray-800"}" data-page="${i}">
                ${i}
            </a>`;
    }

    if (currentPage < totalPages) {
      paginationContainer.innerHTML += `
            <a href="#" class="pagination-link px-4 py-2 bg-gray-300 text-gray-800 rounded" data-page="${currentPage + 1}">
                Next
            </a>`;
    }

    setupPaginationListeners();
  }

  // Function to handle pagination click events
  function setupPaginationListeners() {
    const paginationLinks = document.querySelectorAll('.pagination-link');
    paginationLinks.forEach((link) => {
      link.addEventListener('click', async (e) => {
        e.preventDefault();
        const page = link.getAttribute('data-page');
        const formData = new FormData(form);
        formData.append('page', page);
        const searchParams = new URLSearchParams(formData).toString();
        const response = await fetch(`/api/products?${searchParams}`);
        const data = await response.json();

        renderProducts(data.products);
        renderPagination(data.currentPage, data.totalPages);
      });
    });
  }

</script>

<!--
<script>
  const form = document.getElementById('searchForm');
  form.addEventListener('submit', async (e) => {
    const minRating = parseFloat(document.getElementById('minRating').value);
    const maxRating = parseFloat(document.getElementById('maxRating').value);

    if (minRating > maxRating) {
      e.preventDefault();
      alert('Min rating is less than or equal to Max rating.');
    }
    else {
      e.preventDefault();
      const formData = new FormData(form);
      console.log(formData);
      const searchParams = new URLSearchParams();
      if (formData.get('categories')) {
        formData.getAll('categories').forEach(category => {
          searchParams.append('categories', category);
        });
      }
      if (formData.get('brands')) {
        formData.getAll('brands').forEach(brand => {
          searchParams.append('brands', brand);
        });
      }
      if (formData.get('minPrice')) {
        searchParams.append('minPrice', formData.get('minPrice'));
      }
      if (formData.get('maxPrice')) {
        searchParams.append('maxPrice', formData.get('maxPrice'));
      }
      if (formData.get('minRating')) {
        searchParams.append('minRating', formData.get('minRating'));
      }
      if (formData.get('maxRating')) {
        searchParams.append('maxRating', formData.get('maxRating'));
      }

      if (formData.get('sortBy')) {
        const [sortBy, order] = formData.get('sortBy').split('-');
        searchParams.append('sortBy', sortBy);
        searchParams.append('order', order);
      }

      if (formData.get('order')) {
        searchParams.append('order', formData.get('order'));
      }

      const search = searchParams.toString();
      console.log(search)
      window.location.href = `/products?${search}`;
    }
  });

</script>
-->
